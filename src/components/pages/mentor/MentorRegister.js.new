import React, { useState, useEffect } from "react";
import {
    Box,
    Button,
    Grid,
    TextField,
    Typography,
    Link,
    useMediaQuery,
    CircularProgress,
} from "@mui/material";
import { toast, ToastContainer } from "react-toastify";
import { useNavigate } from "react-router-dom";

// Constants for styling
const NAVY_BLUE_MAIN = "#0A192F";
const NAVY_BLUE_LIGHT = "#172A45";
const NAVY_BLUE_DARK = "#0D1B2A";
const GOLD_MAIN = "#B8860B";
const GOLD_LIGHT = "#DAA520";
const GOLD_DARK = "#8B6914";
const FONT_FAMILY = "'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif";

// Animation constants
const ANIMATIONS = {
    fadeIn: "fadeIn",
    slideUp: "slideUp",
    slideLeft: "slideLeft",
    slideRight: "slideRight",
    float: "float",
    pulse: "pulse",
    shimmer: "shimmer",
    "@keyframes fadeIn": {
        "0%": { opacity: 0 },
        "100%": { opacity: 1 },
    },
    "@keyframes slideUp": {
        "0%": { opacity: 0, transform: "translateY(30px)" },
        "100%": { opacity: 1, transform: "translateY(0)" },
    },
    "@keyframes slideLeft": {
        "0%": { opacity: 0, transform: "translateX(30px)" },
        "100%": { opacity: 1, transform: "translateX(0)" },
    },
    "@keyframes slideRight": {
        "0%": { opacity: 0, transform: "translateX(-30px)" },
        "100%": { opacity: 1, transform: "translateX(0)" },
    },
    "@keyframes float": {
        "0%, 100%": { transform: "translateY(0) rotate(0deg)" },
        "50%": { transform: "translateY(-20px) rotate(2deg)" },
    },
    "@keyframes pulse": {
        "0%, 100%": { transform: "scale(1)" },
        "50%": { transform: "scale(1.05)" },
    },
    "@keyframes shimmer": {
        "0%": { backgroundPosition: "-200% 0" },
        "100%": { backgroundPosition: "200% 0" }
    }
};

export default function MentorRegister() {
    const [fullName, setFullName] = useState("");
    const [mentorID, setMentorID] = useState("");
    const [email, setEmail] = useState("");
    const [password, setPassword] = useState("");
    const [confirmPassword, setConfirmPassword] = useState("");
    const [errors, setErrors] = useState({});
    const [loading, setLoading] = useState(false);
    const navigate = useNavigate();
    const isMobile = useMediaQuery('(max-width:960px)');

    // Validate form fields
    const validateForm = () => {
        const newErrors = {};
        
        if (!fullName) newErrors.fullName = "Name is required";
        if (!mentorID) newErrors.mentorID = "Mentor ID is required";
        if (!email) {
            newErrors.email = "Email is required";
        } else if (!/\S+@\S+\.\S+/.test(email)) {
            newErrors.email = "Email is invalid";
        }
        if (!password) {
            newErrors.password = "Password is required";
        } else if (password.length < 6) {
            newErrors.password = "Password must be at least 6 characters";
        }
        if (password !== confirmPassword) {
            newErrors.confirmPassword = "Passwords don't match";
        }
        
        return newErrors;
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        
        // Validate form
        const formErrors = validateForm();
        if (Object.keys(formErrors).length > 0) {
            setErrors(formErrors);
            return;
        }
        
        setLoading(true);
        try {
            // Here you would typically make an API call to register the user
            // For example:
            // const response = await axios.post("/api/mentors/register", { fullName, mentorID, email, password });
            
            // If successful
            toast.success("Registration successful! Redirecting to login...");
            setTimeout(() => {
                navigate("/mentor-login");
            }, 3000);
        } catch (error) {
            toast.error(error.response?.data?.message || "Registration failed. Please try again.");
        } finally {
            setLoading(false);
        }
    };

    return (
        <Grid container sx={{ height: "100vh" }}>
            {/* Left Section (Form) */}
            <Grid
                item
                xs={12}
                md={6}
                sx={{
                    backgroundColor: NAVY_BLUE_MAIN,
                    p: { xs: 3, md: 6 },
                    display: "flex",
                    flexDirection: "column",
                    alignItems: "center",
                    justifyContent: "center",
                    color: "#fff",
                }}
            >
                <Box
                    sx={{
                        width: "100%",
                        maxWidth: 450,
                        p: { xs: 2, md: 4 },
                        backgroundColor: "rgba(255, 255, 255, 0.05)",
                        borderRadius: 3,
                        backdropFilter: "blur(10px)",
                        border: `1px solid rgba(255, 255, 255, 0.1)`,
                    }}
                >
                    <Typography
                        variant="h4"
                        align="center"
                        sx={{
                            fontFamily: FONT_FAMILY,
                            fontWeight: 700,
                            mb: 3,
                            color: GOLD_MAIN,
                            textShadow: `0 2px 10px rgba(${parseInt(GOLD_MAIN.slice(1, 3), 16)}, ${parseInt(GOLD_MAIN.slice(3, 5), 16)}, ${parseInt(GOLD_MAIN.slice(5, 7), 16)}, 0.3)`,
                        }}
                    >
                        Mentor Registration
                    </Typography>
                    
                    <Box component="form" onSubmit={handleSubmit} sx={{ mt: 1 }}>
                        <TextField
                            margin="normal"
                            required
                            fullWidth
                            label="Full Name"
                            name="fullName"
                            autoComplete="name"
                            autoFocus
                            value={fullName}
                            onChange={(e) => setFullName(e.target.value)}
                            error={!!errors.fullName}
                            helperText={errors.fullName}
                            sx={{
                                "& .MuiInputLabel-root": { color: "rgba(255, 255, 255, 0.7)" },
                                "& .MuiOutlinedInput-root": {
                                    "& fieldset": { borderColor: "rgba(255, 255, 255, 0.3)" },
                                    "&:hover fieldset": { borderColor: GOLD_LIGHT },
                                    "&.Mui-focused fieldset": { borderColor: GOLD_MAIN },
                                },
                                "& .MuiInputBase-input": { color: "#fff" },
                            }}
                        />
                        
                        <TextField
                            margin="normal"
                            required
                            fullWidth
                            label="Mentor ID"
                            name="mentorID"
                            value={mentorID}
                            onChange={(e) => setMentorID(e.target.value)}
                            error={!!errors.mentorID}
                            helperText={errors.mentorID}
                            sx={{
                                "& .MuiInputLabel-root": { color: "rgba(255, 255, 255, 0.7)" },
                                "& .MuiOutlinedInput-root": {
                                    "& fieldset": { borderColor: "rgba(255, 255, 255, 0.3)" },
                                    "&:hover fieldset": { borderColor: GOLD_LIGHT },
                                    "&.Mui-focused fieldset": { borderColor: GOLD_MAIN },
                                },
                                "& .MuiInputBase-input": { color: "#fff" },
                            }}
                        />
                        
                        <TextField
                            margin="normal"
                            required
                            fullWidth
                            label="Email Address"
                            name="email"
                            autoComplete="email"
                            value={email}
                            onChange={(e) => setEmail(e.target.value)}
                            error={!!errors.email}
                            helperText={errors.email}
                            sx={{
                                "& .MuiInputLabel-root": { color: "rgba(255, 255, 255, 0.7)" },
                                "& .MuiOutlinedInput-root": {
                                    "& fieldset": { borderColor: "rgba(255, 255, 255, 0.3)" },
                                    "&:hover fieldset": { borderColor: GOLD_LIGHT },
                                    "&.Mui-focused fieldset": { borderColor: GOLD_MAIN },
                                },
                                "& .MuiInputBase-input": { color: "#fff" },
                            }}
                        />
                        
                        <TextField
                            margin="normal"
                            required
                            fullWidth
                            name="password"
                            label="Password"
                            type="password"
                            autoComplete="new-password"
                            value={password}
                            onChange={(e) => setPassword(e.target.value)}
                            error={!!errors.password}
                            helperText={errors.password}
                            sx={{
                                "& .MuiInputLabel-root": { color: "rgba(255, 255, 255, 0.7)" },
                                "& .MuiOutlinedInput-root": {
                                    "& fieldset": { borderColor: "rgba(255, 255, 255, 0.3)" },
                                    "&:hover fieldset": { borderColor: GOLD_LIGHT },
                                    "&.Mui-focused fieldset": { borderColor: GOLD_MAIN },
                                },
                                "& .MuiInputBase-input": { color: "#fff" },
                            }}
                        />
                        
                        <TextField
                            margin="normal"
                            required
                            fullWidth
                            name="confirmPassword"
                            label="Confirm Password"
                            type="password"
                            autoComplete="new-password"
                            value={confirmPassword}
                            onChange={(e) => setConfirmPassword(e.target.value)}
                            error={!!errors.confirmPassword}
                            helperText={errors.confirmPassword}
                            sx={{
                                "& .MuiInputLabel-root": { color: "rgba(255, 255, 255, 0.7)" },
                                "& .MuiOutlinedInput-root": {
                                    "& fieldset": { borderColor: "rgba(255, 255, 255, 0.3)" },
                                    "&:hover fieldset": { borderColor: GOLD_LIGHT },
                                    "&.Mui-focused fieldset": { borderColor: GOLD_MAIN },
                                },
                                "& .MuiInputBase-input": { color: "#fff" },
                            }}
                        />
                        
                        <Button
                            type="submit"
                            fullWidth
                            variant="contained"
                            disabled={loading}
                            sx={{
                                mt: 3,
                                mb: 2,
                                py: 1.5,
                                backgroundColor: GOLD_MAIN,
                                "&:hover": { backgroundColor: GOLD_DARK },
                                fontFamily: FONT_FAMILY,
                                fontWeight: 600,
                                position: "relative",
                                overflow: "hidden",
                                "&::after": {
                                    content: '""',
                                    position: "absolute",
                                    top: 0,
                                    left: 0,
                                    width: "100%",
                                    height: "100%",
                                    background: `linear-gradient(120deg, ${GOLD_MAIN}00, ${GOLD_LIGHT}40, ${GOLD_MAIN}00)`,
                                    animation: `${ANIMATIONS.shimmer} 2s infinite linear`,
                                },
                            }}
                        >
                            {loading ? <CircularProgress size={24} color="inherit" /> : "Register"}
                        </Button>
                        
                        <Grid container justifyContent="flex-end">
                            <Grid item>
                                <Link 
                                    href="/mentor-login" 
                                    variant="body2"
                                    sx={{ 
                                        color: GOLD_LIGHT,
                                        textDecoration: "none",
                                        "&:hover": { textDecoration: "underline" }
                                    }}
                                >
                                    Already have an account? Sign in
                                </Link>
                            </Grid>
                        </Grid>
                    </Box>
                </Box>
            </Grid>
            
            {/* Right Section */}
            {!isMobile && (
                <Grid
                    item
                    xs={12}
                    md={6}
                    sx={{
                        backgroundColor: "#000",
                        display: "flex",
                        alignItems: "center",
                        justifyContent: "center",
                        flexDirection: "column",
                        color: "#fff",
                    }}
                >
                    <Box sx={{ maxWidth: 550, width: "100%" }}>
                        <Box sx={{ width: "100%", backgroundColor: "#fff", padding: 4, borderRadius: 6 }}>
                            <Typography variant="h5" fontWeight="bold" mb={2} color="black" fontSize={'40px'} sx={{ fontFamily: "courier" }}>
                                Welcome to Career Compass!
                            </Typography>
                            <Typography variant="body1" color="text.primary" mb={2} sx={{ fontFamily: "courier" }}>
                                Thank you for your interest in volunteering as a Compass mentor to help students who are in need to achieve their college and career dreams. The Compass mentoring model is completely virtual: you will conduct all communication through our online platform, without ever having to share your personal contact info with your mentee. The platform also contains all the tools and resources you will need to be successful as a mentor, including mentor training that takes about 30 minutes to complete and can be found in the "help" tab upon registering.
                            </Typography>
                        </Box>
                    </Box>
                </Grid>
            )}
            
            <ToastContainer position="top-center" />
        </Grid>
    );
}